#!/usr/bin/env python3
import os
import sys
import json

import click
from sarge import run

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def _fail_loudly(sarge_obj):
    """
    Throw an exit(0) error when the return code from sarge runs command is
    not zero
    """
    if sarge_obj.returncode:
        sys.exit(1)

def _manage(command, args=''):
    """
    A helper that simplifies Django management command invocations
    """
    p = run('{}/manage.py {} {}'.format(BASE_DIR, command, args))
    _fail_loudly(p)


def _psql(query, no_sudo=False, is_file=False, postgresdb=False):
    """
    Dev only - used by the setup function below
    """
    sudo = 'sudo -u postgres'
    if no_sudo:
        sudo = ''

    dbflag = ''

    if postgresdb:
        dbflag = '-d postgres'

    if is_file:
        p = run('{} psql {} < {}'.format(sudo, dbflag, query))
    else:
        p = run('{} psql {} -c "{}"'.format(sudo, dbflag, query))

    _fail_loudly(p)


@click.command()
@click.pass_context
def reset(ctx):
    """
    Drop and recreate the DB but do not load data. Migrations should run
    """
    from dee_api.config import settings

    no_sudo = ctx.obj.get('NO_SUDO', False)
    db_name = settings.DATABASES.get('default').get('NAME')
    db_user = settings.DATABASES.get('default').get('USER')
    db_pass = settings.DATABASES.get('default').get('PASSWORD')

    _psql("DROP DATABASE IF EXISTS {}".format(db_name), no_sudo)
    _psql("DROP DATABASE IF EXISTS test_{}".format(db_name), no_sudo)
    _psql("DROP USER IF EXISTS {}".format(db_user), no_sudo)
    _psql("CREATE USER {0} WITH SUPERUSER CREATEDB "
          "CREATEROLE LOGIN PASSWORD '{1}'".format(db_user, db_pass), no_sudo)
    _psql('CREATE DATABASE {}'.format(db_name), no_sudo)

    _manage('migrate')
    _manage('load_default_data')


@click.group(chain=True, invoke_without_command=True)
@click.pass_context
@click.option(
    '--no-sudo', is_flag=True, default=False, help='Access to psql via sudo'
)
def setup(ctx, no_sudo):
    """
    Delete the development database, recreate it, load data
    """
    ctx.obj['NO_SUDO'] = no_sudo
    ctx.invoke(reset)


@click.command()
def deploy():
    """
    Build a package and upload it to the pip registry
    """
    p = run('python setup.py sdist upload -r sheriff')
    _fail_loudly(p)


@click.command()
def deploy_ci():
    """
    Runs deployments on every merge to master
    """

    from dee_api import __version__
    extra_args = {
        'dee_api_version': __version__,
    }
    host_file = os.path.join(BASE_DIR, 'playbooks', 'prod')
    playbook = os.path.join(BASE_DIR, 'playbooks', 'prod.yml')
    vault_file = os.path.join(BASE_DIR, 'vault_password.txt')
    cfg_path = os.path.join(BASE_DIR, 'playbooks', 'ansible.cfg')
    os.environ['ANSIBLE_CONFIG'] = cfg_path
    p = run(
        "ansible-playbook -i {} {} --extra-vars='{}' --vault-password-file={} --tags='dee_api'".format(
            host_file, playbook, json.dumps(extra_args), vault_file))
    _fail_loudly(p)



@click.group()
def cli():
    """
    Development helpers

    These utilities help with testing, loading of data, database resets etc
    """
    pass


cli.add_command(deploy)
cli.add_command(deploy_ci)
cli.add_command(reset)
cli.add_command(setup)

if __name__ == '__main__':
    cli(obj={})
